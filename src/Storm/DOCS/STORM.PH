*playerid
0x80000000,
32-bit
A description of the local player.  This can be generated by the program, and contain information such as the player
A pointer to a structure containing information about how the network provider should display user interface screens if necessary.  Most network providers will fail if this information is not given.  For example, the modem provider cannot query the user
A pointer to a structure containing information about the application which is necessary for automatic version control.  Some network providers are capable of performing over-the-wire version updates.
A pointer to a structure containing information about the program, such as the program name, version, and number of players supported.  This is a mandatory parameter.
A set of flags specifying how the sound should be played.  Use the SND_* constants defined in Windows.h.
A structure containing the interface data that was passed to SNetSelectGame(), modified as necessary to ensure that the dialog that the create callback displays fits with the network provider
A structure containing the player data that was passed to SNetSelectGame().
A structure containing the program data that was passed to SNetSelectGame().
A structure containing the version data that was passed to SNetSelectGame().
A value returned by the callback function specifying which
An array
An identifier which tells whether the name and description describe a game or a player.  It can be one of the following values:
An invalid event ID was specified
Any
Applications
BOOL SNetSelectGame (
Battle.net
Blizzard
Cancel
Cancel.
CategoryProc
CheckAuthProc
Courier New;
CreateProc
DWORD
DWORD *
DWORDs,
DrawDescProc
EnumGamesProc
EnumProvidersProc
EventProc
FALSE
For
Functions
GetArtProc
GetDataProc
GetLastError()
IDs
IDs,
IDs.
If this function fails, the application should call GetLastError() to determine the reason for failure.  If GetLastError() returns SNET_ERROR_REQUIRES_UPGRADE, the application should call SNetPerformUpgrade().
LPCSTR
LPDWORD
LPVOID
Meaning
Members
MessageBoxProc
Most
New;
No active player exists with the given ID
No callback function is provided
No callback function was provided
No data pointer was provided
No game has been created or joined
No network provider has been initialized
No player name or description is specified
No variable is provided to receive the result
None.
Other
Otherwise,
Parameters
PlaySoundProc
Player has been squelched by the local user
Player is a Blizzard employee
Player is a channel moderator
Player is a speaker for a special event
Player is a sysop of the selected gaming service
Rather than calling this function manually, an application will generally call SNetSelectGame() to present the user with a list of games and allow him to join a game or create a new one.
Rather than calling this function manually, an application will generally call SNetSelectProvider() to present the user with a list of network providers and allow him to select and initialize one.
Return Value
SNETCAPS
SNETCAPSPTR
SNETCREATEDATA
SNETEVENTPROC
SNETPLAYERDATA
SNETPLAYERDATAPTR
SNETPROGRAMDATA
SNETPROGRAMDATAPTR
SNETUIDATA
SNETUIDATAPTR
SNETVERSIONDATA
SNETVERSIONDATAPTR
SNET_DDPF_BLIZZARD
SNET_DDPF_MODERATOR
SNET_DDPF_SPEAKER
SNET_DDPF_SQUELCHED
SNET_DDPF_SYSOP
SNET_ERROR_REQUIRES_UPGRADE,
SNET_EVENT_INITDATA
SNet
SNetCreateGame
SNetCreateGame()
SNetCreateGame(),
SNetCreateGame().
SNetDestroy
SNetEnumGames
SNetEnumProviders
SNetEnumerateProviders().
SNetGetNetworkLatency
SNetGetNetworkLatency()
SNetGetNumPlayers
SNetGetPlayerCaps
SNetGetPlayerName
SNetGetProviderCaps
SNetGetTurnsInTransit
SNetInitializeProvider
SNetInitializeProvider().
SNetJoinGame
SNetLeaveGame
SNetLeaveGame().
SNetPerformUpgrade
SNetPerformUpgrade().
SNetReceiveMessage
SNetReceiveMessage()
SNetReceiveTurns
SNetReceiveTurns().
SNetRegisterEventHandler
SNetResetLatencyMeasurements
SNetSelectGame
SNetSelectGame()
SNetSelectGame(),
SNetSelectGame().
SNetSelectProvider
SNetSelectProvider()
SNetSendMessage
SNetSendTurn
SNetSendTurn()
SNetStartGame
SNetUnregisterEventHandler
Some
StatusProc
Storm
StormDestroy().
Symbol;
TRUE
The ID of the network provider which is making the request.
The application
The application needs to be upgraded before it can connect to the server.
The name of the local player.
The network provider was unable to initialize itself.  For example, the IPX provider may fail if IPX support is not available, and the Battle.net provider may fail if it cannot contact any Battle.net servers.
The player data is missing or invalid.
The program data is missing or invalid.
The size field of the SNETCAPS structure is invalid
The size of the buffer pointed to by
The size of the structure, in bytes.
The size of the turn
The system is out of memory
This function returns TRUE for success or FALSE for failure.  The function can fail if:
This function should return TRUE to continue enumeration, or FALSE to stop.
Value
Windows.h.
ability
abortproc
about
above
active
after
all
allow
allowed
allows
already
also
always
amount
and
another
application
application-defined
application-specific
application.
archive
are
array
arrayplayerstatus
artwork
artwork,
assigned
authorized
automatic
automatically
available
available,
available.
background
bandwidth
been
before
beginning
being
below.
between
bitmap
bitmap.
bits
box
box.
buffer
buffer,
buffer.
buffersize
buffersize,
but
button
button.
buttons:
bytes
bytes,
bytes.
call
callback
callback,
called
calling
calls
can
canceled
cannot
capabilities
capabilities,
capable
caps
caption,
categories
category
categorybits
categorymask
categorymask)
channel
channel.
character
characters,
chat
class
communications
computer
computer.
computers
connect
constants
contact
contain
containing
contains
continue
control.
create
created
createdata
creates
creating
creation
current
currently
data
data,
data.
databytes
decided
decoded
default
default.
defaultturns
define
defined
defined.
defined:
describe
describing
description
description.
destroy
determine
dial
dialog
dialog.
display
displayed
displays
does
doesn
draw
drawdata
drawn.
during
each
effect.
effects.
either
employee
ensure
enumerate
enumerated.
enumeration,
error
especially
event
eventid
eventid,
events
example,
executable
existing
exists
expected
expressed
fail
failed
fails,
failure.
feedback
field
file
fill
filled
first
firstplayerid
flags
flags,
following
from
full
function
function.
game
game,
game.
gamedescription
gameid
gamename
gamename,
gamepassword
gamepassword,
games
games,
games.
gaming
generally
generated
get
given
given.
graphical
handle
handler
has
have
height
highest
him
hint
how
human-readable
iconic
identifier
if:
ignored.
includes
indicate
individual
information
initdata
initdatabytes
initialization
initialize
initialized
initialized.
installed
interested
interface
interface.
interfacedata
interfacedata,
into
invalid
invalid,
invalid.
item
item.
itemdescription
itemdescription,
itemtype
itemtype,
its
itself.
join
join,
joined
joined.
joining
joining.
latency
latency,
latency.
leaving
level.
like
list
local
located
machine
machines
maintain
makes
making
mandatory
manually,
master
match
matchmaking
maximum
maxplayers
maxplayers;
may
measured
measurement
medium,
memory
message
message.
messages
mincaps
mincaps,
minimum
missing
modem
moderator
modified
more
must
name
name,
name.
necessary
necessary.
need
needed
needs
network
new
next
not
null
number
number.
numbered
occurred.
once
one
one.
only
operation
operation.
options
options,
or a phone number to dial without the ability to display user interface screens.
order
out
over
over-the-wire
own
palette
parameter
parameter.
parentwindow
pass
passed
passing
password
password.
path
per
perform
performing
performs
phone
placeholder
played.
player
player,
player.
playerdata
playerdata,
playerdescription
playerdescription,
playerid
playerid,
playername
playername,
players
players.
pointed
pointer
pointers
present
private
probably
procedure
process
process.
processed
processing
product
program
program,
programdata
programdata,
provide
provided
provided,
provider
provider,
provider.
providerid
providerid,
providers
provides
push
query
querying
range
rather
reason
receive
received
received.
receives
recommended
registered.
represent
representing
request
request.
requested
requested.
requesting
required
requirements
response
responsible
result
return
returned
returned.
returns
round-trip
s character class or level.
s interface.
s maximum number of players
same
screens
screens.
second
second,
second.
select
selected
selected.
sending
sent
server
server.
servers.
service
set
should
simply
since
single
size
size,
size;
soon
sound
soundid
speaker
special
specific
specified
specify
specifying
squelched
standard
started
status
string
struct
structure
structure,
structure.
success
successful.
successfully
such
support
supported
supported.
supports
system
system.
systems,
take
than
that
the
their
then
there
this
through
time
time,
transit
turn
turns
two
type
unable
unique
updates.
upgrade
upgraded
use
used
user
user.
uses
using
valid
values:
variable
version
version,
versiondata
versiondata,
waiting
was
when
where
whether
which
will
window
window.
with
without
yet
you
zero
