{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f11\fmodern\fcharset0\fprq1 Courier New;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar \f4\fs20 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \b\f4\fs40 \sbasedon0\snext16 API Title;}{\s16\widctlpar \f4 \sbasedon0\snext16 API Description;}{\s17\widctlpar 
\f11\fs22 \sbasedon0\snext17 API Function;}{\s18\widctlpar \b\f4 \sbasedon0\snext16 API Section;}{\s19\li720\widctlpar \f4 \sbasedon0\snext16 API Parameter Description;}{\s20\widctlpar \i\f4 \sbasedon0\snext19 API Parameter Name;}{\s21\widctlpar \f4\fs20 
\sbasedon0\snext21 footnote text;}{\*\cs22 \additive\super \sbasedon10 footnote reference;}}{\info{\title SNetCreateGame}{\author Mike O'Brien}{\operator Mike O'Brien}{\creatim\yr1996\mo8\dy21\hr16\min18}{\revtim\yr1996\mo10\dy3\hr15\min5}{\version2}
{\edmins0}{\nofpages2}{\nofwords290}{\nofchars1656}{\*\company Blizzard Entertainment}{\vern57431}}\widowctrl\ftnbj\aenddoc\hyphcaps0\formshade \fet0\sectd \linex0\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s15\keepn\widctlpar \b\f4\fs40 {\cs22\super ${\footnote \pard\plain \s21\widctlpar \f4\fs20 {\cs22\super $} GetArtProc}#{\footnote \pard\plain \s21\widctlpar \f4\fs20 {\cs22\super #} GetArtProc}K{\footnote \pard\plain 
\s21\widctlpar \f4\fs20 {\cs22\super K} GetArtProc}} GetArtProc 
\par \pard\plain \s16\widctlpar \f4 
\par {\b\i GetArtProc() is a placeholder for an application-defined function name.}
\par 
\par This function is called by Storm or the current network provider to get artwork necessary for displaying a user interface screen.
\par 
\par \pard\plain \s17\widctlpar \f11\fs22 BOOL CALLBACK GetArtProc (
\par \tab DWORD\tab \tab \tab  providerid,
\par \tab DWORD\tab \tab \tab  artid,
\par \tab LPPALETTEENTRY\tab  palette,
\par \tab LPBYTE\tab \tab  buffer,
\par \tab DWORD\tab \tab \tab  buffersize,
\par \tab int\tab \tab \tab *width,
\par \tab int\tab \tab \tab *height,
\par \tab int\tab \tab \tab *bitdepth
\par );
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s18\widctlpar \b\f4 Parameters
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 providerid
\par \pard\plain \s19\li720\widctlpar \f4 The ID of the network provider which is requesting the artwork, or zero if the artwork is being requested for a screen which is not provider specific.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 artid
\par \pard\plain \s19\li720\widctlpar \f4 The ID of the artwork being requested.  The standard artwork IDs are shown below.  Network providers can define their own IDs, above 0x80000000, for artwork that is specific to the provider.
\par \pard\plain \s16\widctlpar \f4 
\par \trowd \trgaph108\trleft612 \cellx4230\cellx7812 \pard\plain \s19\widctlpar\intbl \f4 {\b Value}\cell {\b Meaning}\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft612 \cellx4230\cellx7812 \pard\plain \s19\widctlpar\intbl \f4 
SNET_ART_BACKGROUND\cell The background bitmap for the dialog.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \trowd \trgaph108\trleft612 \cellx4230\cellx7812 \pard\plain \s19\widctlpar\intbl \f4 SNET_ART_BUTTONTEXTURE\cell 
The texture which is tiled over buttons in the dialog.\cell \pard\plain \widctlpar\intbl \f4\fs20 \row \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 palette
\par \pard\plain \s19\li720\widctlpar \f4 A pointer to an array of palette entries, to be filled in by the function.  This parameter can be NULL if the provider doesn\rquote t need to load a palette.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 buffer
\par \pard\plain \s19\li720\widctlpar \f4 A pointer to a buffer where the function should copy the bitmap data.  This parameter can be NULL if the provider doesn\rquote t need the bitmap data, or if it is only querying the bitmap dimensions.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 buffersize
\par \pard\plain \s19\li720\widctlpar \f4 The size of the buffer pointed to by {\i buffer}.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 width
\par \pard\plain \s19\li720\widctlpar \f4 A pointer to a variable which the function should fill in with the width of the bitmap.  This parameter can be NULL if the provider doesn\rquote t need the bitmap width.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 height
\par \pard\plain \s19\li720\widctlpar \f4 A pointer to a variable which the function should fill in with the height of the bitmap.  This parameter can be NULL if the provider doesn\rquote t need the bitmap height.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s20\widctlpar \i\f4 bitdepth
\par \pard\plain \s19\li720\widctlpar \f4 A pointer to a variable which the function should fill in with the number of bits per pixel in the bitmap.  This parameter can be NULL if the provider doesn\rquote t need the bitmap pixel depth.
\par \pard\plain \s16\widctlpar \f4 
\par \pard\plain \s18\widctlpar \b\f4 Return Value
\par \pard\plain \s16\widctlpar \f4 
\par This function should return TRUE if the picture was successfully loaded, or FALSE if an error occurred.
\par }